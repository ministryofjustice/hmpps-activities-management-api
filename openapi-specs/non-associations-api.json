{
  "openapi": "3.0.1",
  "info": {
    "title": "Non-Associations API",
    "description": "API for viewing and managing non-associations for prisoners",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "license": {
      "name": "MIT"
    },
    "version": "2024-10-14.6680.cd97cc5"
  },
  "servers": [
    {
      "url": "/",
      "description": "Current url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    },
    {
      "hmpps-auth": []
    }
  ],
  "tags": [
    {
      "name": "Non-Associations",
      "description": "Endpoints to get/create/update prisoners' non-associations"
    },
    {
      "name": "Legacy non-associations-details",
      "description": "Mimics the NOMIS/Prison API interface for retrieving non-associations. <em>**IMPORTANT**</em>: Use new `GET /prisoner/{prisonerNumber}/non-associations` endpoint if possible"
    }
  ],
  "paths": {
    "/queue-admin/retry-dlq/{dlqName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryDlq",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryAllDlqs",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "purgeQueue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/reopen": {
      "put": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Re-open a non-association",
        "description": "Requires REOPEN_NON_ASSOCIATIONS role with write scope.\n**Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead create a new non-association.",
        "operationId": "reopenNonAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReopenNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Non-association re-opened",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the REOPEN_NON_ASSOCIATIONS role with write scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/close": {
      "put": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Close a non-association",
        "description": "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId": "closeNonAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Non-association updated and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role with write scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations": {
      "get": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Get non-associations, filtered and paged",
        "description": "Requires READ_NON_ASSOCIATIONS role",
        "operationId": "getNonAssociations",
        "parameters": [
          {
            "name": "includeOpen",
            "in": "query",
            "description": "Whether to include open non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include open non-associations or not",
              "example": false,
              "default": "true"
            },
            "example": false
          },
          {
            "name": "includeClosed",
            "in": "query",
            "description": "Whether to include closed non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include closed non-associations or not",
              "example": true,
              "default": "false"
            },
            "example": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "id,ASC"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "When input parameters are not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "A page of non-associations are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageNonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the READ_NON_ASSOCIATIONS role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Creates a non-association between two prisoners.",
        "description": "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId": "createNonAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Returns the created non-association",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required privileges. Requires the NON_ASSOCIATIONS role with write scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Some of the prisoners were not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Open non-association already exists or some prisoner’s location is null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/delete": {
      "post": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Delete a non-association",
        "description": "Requires DELETE_NON_ASSOCIATIONS role with write scope.\n**Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead close non-associations.",
        "operationId": "deleteNonAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Non-association deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the DELETE_NON_ASSOCIATIONS role with write scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/involving": {
      "post": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Get non-associations involving any of the given prisoners. Either person in the non-association must be in the provided list.",
        "description": "Requires READ_NON_ASSOCIATIONS role.",
        "operationId": "getNonAssociationsInvolvingPrisoners",
        "parameters": [
          {
            "name": "includeOpen",
            "in": "query",
            "description": "Whether to include open non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include open non-associations or not",
              "example": false,
              "default": "true"
            },
            "example": false
          },
          {
            "name": "includeClosed",
            "in": "query",
            "description": "Whether to include closed non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include closed non-associations or not",
              "example": true,
              "default": "false"
            },
            "example": true
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "When provided return only non-associations where both prisoners are in the given prison",
            "required": false,
            "schema": {
              "type": "string",
              "description": "When provided return only non-associations where both prisoners are in the given prison",
              "example": "MDI",
              "default": "null"
            },
            "example": "MDI"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "minItems": 1,
                "uniqueItems": true,
                "type": "array",
                "description": "One or more distinct prisoner numbers",
                "items": {
                  "type": "string",
                  "description": "Prisoner number",
                  "example": "A1234BC"
                }
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "When fewer than one distinct prisoner numbers are provided or neither open nor closed non-associations are included",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns the non-associations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonAssociation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Any of the prisoners could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/between": {
      "post": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Get non-associations between two or more prisoners by prisoner number. Both people in the non-associations must be in the provided list.",
        "description": "Requires READ_NON_ASSOCIATIONS role.",
        "operationId": "getNonAssociationsBetweenPrisoners",
        "parameters": [
          {
            "name": "includeOpen",
            "in": "query",
            "description": "Whether to include open non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include open non-associations or not",
              "example": false,
              "default": "true"
            },
            "example": false
          },
          {
            "name": "includeClosed",
            "in": "query",
            "description": "Whether to include closed non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include closed non-associations or not",
              "example": true,
              "default": "false"
            },
            "example": true
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "When provided return only non-associations where both prisoners are in the given prison",
            "required": false,
            "schema": {
              "type": "string",
              "description": "When provided return only non-associations where both prisoners are in the given prison",
              "example": "MDI",
              "default": "null"
            },
            "example": "MDI"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "minItems": 2,
                "uniqueItems": true,
                "type": "array",
                "description": "Two or more distinct prisoner numbers",
                "items": {
                  "type": "string",
                  "description": "Prisoner number",
                  "example": "A1234BC"
                }
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "When fewer than two distinct prisoner numbers are provided or neither open nor closed non-associations are included",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns the non-associations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonAssociation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Any of the prisoners could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}": {
      "get": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Get a non-association between two prisoners by ID.",
        "description": "Requires READ_NON_ASSOCIATIONS role.",
        "operationId": "getNonAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns the non-association",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Partial update of a non-association by ID.",
        "description": "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId": "patchNonAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Non-association updated and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role with write scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subject-access-request": {
      "get": {
        "tags": [
          "Subject Access Request"
        ],
        "summary": "Provides content for a prisoner to satisfy the needs of a subject access request on their behalf",
        "description": "Requires role SAR_DATA_ACCESS or additional role as specified by hmpps.sar.additionalAccessRole configuration.",
        "operationId": "getSarContentByReference",
        "parameters": [
          {
            "name": "prn",
            "in": "query",
            "description": "NOMIS Prison Reference Number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crn",
            "in": "query",
            "description": "nDelius Case Reference Number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Optional parameter denoting minimum date of event occurrence which should be returned in the response",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Optional parameter denoting maximum date of event occurrence which should be returned in the response",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Request successfully processed - no content found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Request successfully processed - content found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HmppsSubjectAccessRequestContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "209": {
            "description": "Subject Identifier is not recognised by this service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The client does not have authorisation to make this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/{reportVariantId}": {
      "get": {
        "tags": [
          "Data API - Synchronous"
        ],
        "description": "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId": "configuredApiDataset",
        "parameters": [
          {
            "name": "selectedPage",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortedAsc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n    ",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "filters.date.start": "2023-04-25",
              "filters.date.end": "2023-05-30"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/{fieldId}": {
      "get": {
        "tags": [
          "Data API - Synchronous"
        ],
        "description": "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId": "configuredApiDynamicFilter",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "sortedAsc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n    ",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "filters.date.start": "2023-04-25",
              "filters.date.end": "2023-05-30"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "The value to match the start of the fieldId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lond"
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The name of the schema field which will be used as a dynamic filter.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "name"
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/tables/{tableId}/result": {
      "get": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Returns the resulting rows of the executed statement in a paginated fashion which has been stored in a dedicated table.",
        "operationId": "getQueryExecutionResult",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            }
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectedPage",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/tables/{tableId}/result/summary/{summaryId}": {
      "get": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Returns a summary of a request, which has been stored in a dedicated table.",
        "operationId": "getSummaryQueryExecutionResult",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            }
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summaryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/statements/{statementId}/status": {
      "get": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Returns the status of the statement execution based on the statement ID provided.The following status values can be returned: \nABORTED - The query run was stopped by the user.\nALL - A status value that includes all query statuses. This value can be used to filter results.\nFAILED - The query run failed.\nFINISHED - The query has finished running.\nPICKED - The query has been chosen to be run.\nSTARTED - The query run has started.\nSUBMITTED - The query was submitted, but not yet processed.\nNote: When the status is FAILED the error field of the response will be populated.ResultRows is the number of rows returned from the SQL statement. A -1 indicates the value is null.ResultSize is the size in bytes of the returned results. A -1 indicates the value is null.\nFor Athena: \nAthena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from STARTED or FAILED to SUBMITTED.\n",
        "operationId": "getQueryExecutionStatus",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StatementExecutionStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/count": {
      "get": {
        "tags": [
          "Data API - Synchronous"
        ],
        "description": "Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId": "configuredApiCount",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "description": "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n    ",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "filters.date.start": "2023-04-25",
              "filters.date.end": "2023-05-30"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/metrics/{metricId}": {
      "get": {
        "tags": [
          "Metrics Data API"
        ],
        "description": "Returns the metric dataset for the given data product definition ID.",
        "operationId": "configuredApiDataset_1",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metricId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/report/tables/{tableId}/count": {
      "get": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Returns the number of rows of the table which contains the result of a previously executed query.",
        "operationId": "getExternalTableRowCount",
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}": {
      "get": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "getDlqMessages",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxMessages",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonerNumber}/non-associations": {
      "get": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "Get non-associations by prisoner number",
        "description": "Requires READ_NON_ASSOCIATIONS role.",
        "operationId": "getPrisonerNonAssociations",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "description": "The offender prisoner number",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string",
              "description": "The offender prisoner number",
              "example": "A1234BC"
            },
            "example": "A1234BC"
          },
          {
            "name": "includeOpen",
            "in": "query",
            "description": "Whether to include open non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include open non-associations or not",
              "example": false,
              "default": "true"
            },
            "example": false
          },
          {
            "name": "includeClosed",
            "in": "query",
            "description": "Whether to include closed non-associations or not",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include closed non-associations or not",
              "example": true,
              "default": "false"
            },
            "example": true
          },
          {
            "name": "includeOtherPrisons",
            "in": "query",
            "description": "Whether to include non-associations with prisoners in other prisons",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Whether to include non-associations with prisoners in other prisons",
              "example": true,
              "default": "false"
            },
            "example": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort non-associations by",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort non-associations by",
              "example": "LAST_NAME",
              "default": "WHEN_CREATED",
              "enum": [
                "WHEN_CREATED",
                "WHEN_UPDATED",
                "WHEN_CLOSED",
                "LAST_NAME",
                "FIRST_NAME",
                "PRISONER_NUMBER",
                "PRISON_ID",
                "PRISON_NAME",
                "CELL_LOCATION"
              ]
            },
            "example": "LAST_NAME"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction (fallback depends on sortBy)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort direction (fallback depends on sortBy)",
              "example": "DESC",
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "example": "DESC"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; for example including neither open nor closed non-associations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns non-association details for this prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerNonAssociations"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Any of the prisoners could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/legacy/api/non-associations/{id}": {
      "get": {
        "tags": [
          "Legacy non-associations-details"
        ],
        "summary": "Get a non-association between two prisoners by ID in NOMIS/Prison API format",
        "description": "Requires NON_ASSOCIATIONS_SYNC role.",
        "operationId": "getLegacyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The non-association ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The non-association ID",
              "example": 42
            },
            "example": 42
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns the non-association",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyNonAssociation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing required role. Requires the NON_ASSOCIATIONS_SYNC role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/definitions": {
      "get": {
        "tags": [
          "Report Definition API"
        ],
        "description": "Gets summaries of all report definitions",
        "operationId": "definitions",
        "parameters": [
          {
            "name": "renderMethod",
            "in": "query",
            "description": "Set this parameter to filter the list to only include reports for the given rendering method.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "HTML",
                "PDF",
                "SVG"
              ]
            },
            "example": "HTML"
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDefinitionSummary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/definitions/{reportId}/{variantId}": {
      "get": {
        "tags": [
          "Report Definition API"
        ],
        "description": "Gets report definition containing a single variant.",
        "operationId": "definition",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "The ID of the report definition.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "external-movements"
          },
          {
            "name": "variantId",
            "in": "path",
            "description": "The ID of the variant definition.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "list"
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SingleVariantReportDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/definitions/{dataProductDefinitionId}/metrics/{metricId}": {
      "get": {
        "tags": [
          "Metric Definition API"
        ],
        "description": "Gets the metric definition.",
        "operationId": "metricDefinition",
        "parameters": [
          {
            "name": "dataProductDefinitionId",
            "in": "path",
            "description": "The ID of the Data Product Definition.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "external-movements"
          },
          {
            "name": "metricId",
            "in": "path",
            "description": "The ID of the metric.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "metricId"
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}": {
      "get": {
        "tags": [
          "Metric Definition API"
        ],
        "description": "Gets the metric dashboard definition.",
        "operationId": "dashboardDefinition",
        "parameters": [
          {
            "name": "dataProductDefinitionId",
            "in": "path",
            "description": "The ID of the Data Product Definition.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "external-movements"
          },
          {
            "name": "dashboardId",
            "in": "path",
            "description": "The ID of the dashboard.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "dashboardId"
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/constants": {
      "get": {
        "tags": [
          "Non-Associations"
        ],
        "summary": "List codes and descriptions for enumerated field types",
        "operationId": "constants",
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns codes and descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/async/reports/{reportId}/{reportVariantId}": {
      "get": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Executes asynchronously the dataset query for the given report and stores the result into an external table.The response returned contains the table ID and the execution ID. This is the asynchronous version of the /reports/{reportId}/{reportVariantId} API.",
        "operationId": "asyncConfiguredApiExecuteQuery",
        "parameters": [
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortedAsc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n     Note: For legacy nomis and bodmis reports, for filters deriving from DPD parameters(prompts),there is no need for these to be suffixed with .start and .end. For example, filters.start_date and filters.end_date are perfectly valid in this case.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "filters.date.start": "2023-04-25",
              "filters.date.end": "2023-05-30"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "default response",
            "headers": {
              "x-no-data-warning": {
                "description": "Provides additional information about why no data has been returned.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StatementExecutionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/statements/{statementId}": {
      "delete": {
        "tags": [
          "Data API - Asynchronous"
        ],
        "description": "Cancels the execution of a running query.",
        "operationId": "cancelQueryExecution",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportVariantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataProductDefinitionsPath",
            "in": "query",
            "description": "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "definitions/prisons/orphanage"
            },
            "example": "definitions/prisons/orphanage"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StatementCancellationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-jwt": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "developerMessage",
          "status",
          "userMessage"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "moreInfo": {
            "type": "string"
          }
        },
        "description": "Error response"
      },
      "RetryDlqResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PurgeQueueResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReopenNonAssociationRequest": {
        "required": [
          "reopenReason"
        ],
        "type": "object",
        "properties": {
          "reopenReason": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "reopenedAt": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "reopenedBy": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request to re-open a non-association"
      },
      "NonAssociation": {
        "required": [
          "comment",
          "firstPrisonerNumber",
          "firstPrisonerRole",
          "firstPrisonerRoleDescription",
          "id",
          "isClosed",
          "isOpen",
          "reason",
          "reasonDescription",
          "restrictionType",
          "restrictionTypeDescription",
          "secondPrisonerNumber",
          "secondPrisonerRole",
          "secondPrisonerRoleDescription",
          "updatedBy",
          "whenCreated",
          "whenUpdated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firstPrisonerNumber": {
            "type": "string"
          },
          "firstPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "firstPrisonerRoleDescription": {
            "type": "string"
          },
          "secondPrisonerNumber": {
            "type": "string"
          },
          "secondPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "secondPrisonerRoleDescription": {
            "type": "string"
          },
          "reason": {
            "type": "string",
            "enum": [
              "BULLYING",
              "GANG_RELATED",
              "ORGANISED_CRIME",
              "LEGAL_REQUEST",
              "THREAT",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "reasonDescription": {
            "type": "string"
          },
          "restrictionType": {
            "type": "string",
            "enum": [
              "CELL",
              "LANDING",
              "WING"
            ]
          },
          "restrictionTypeDescription": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "updatedBy": {
            "type": "string"
          },
          "isClosed": {
            "type": "boolean"
          },
          "closedBy": {
            "type": "string"
          },
          "closedReason": {
            "type": "string"
          },
          "closedAt": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "isOpen": {
            "type": "boolean"
          }
        },
        "description": "Non-association"
      },
      "CloseNonAssociationRequest": {
        "required": [
          "closedReason"
        ],
        "type": "object",
        "properties": {
          "closedReason": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "closedAt": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "closedBy": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request to close a non-association"
      },
      "CreateNonAssociationRequest": {
        "required": [
          "comment",
          "firstPrisonerNumber",
          "firstPrisonerRole",
          "reason",
          "restrictionType",
          "secondPrisonerNumber",
          "secondPrisonerRole"
        ],
        "type": "object",
        "properties": {
          "firstPrisonerNumber": {
            "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
            "type": "string"
          },
          "firstPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "secondPrisonerNumber": {
            "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
            "type": "string"
          },
          "secondPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "reason": {
            "type": "string",
            "enum": [
              "BULLYING",
              "GANG_RELATED",
              "ORGANISED_CRIME",
              "LEGAL_REQUEST",
              "THREAT",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "restrictionType": {
            "type": "string",
            "enum": [
              "CELL",
              "LANDING",
              "WING"
            ]
          },
          "comment": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request format for creating a new, open, non-association between two prisoners"
      },
      "DeleteNonAssociationRequest": {
        "required": [
          "deletionReason",
          "staffUserNameRequestingDeletion"
        ],
        "type": "object",
        "properties": {
          "deletionReason": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "staffUserNameRequestingDeletion": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request to delete a non-association"
      },
      "PatchNonAssociationRequest": {
        "type": "object",
        "properties": {
          "firstPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "secondPrisonerRole": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "reason": {
            "type": "string",
            "enum": [
              "BULLYING",
              "GANG_RELATED",
              "ORGANISED_CRIME",
              "LEGAL_REQUEST",
              "THREAT",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "restrictionType": {
            "type": "string",
            "enum": [
              "CELL",
              "LANDING",
              "WING"
            ]
          },
          "comment": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request format for updating a non-association between two prisoners"
      },
      "HmppsSubjectAccessRequestContent": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "object"
          }
        }
      },
      "StatementExecutionStatus": {
        "required": [
          "duration",
          "resultRows",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "resultRows": {
            "type": "integer",
            "format": "int64"
          },
          "resultSize": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "errorCategory": {
            "type": "integer",
            "format": "int32"
          },
          "stateChangeReason": {
            "type": "string"
          }
        }
      },
      "Count": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MetricDataResponse": {
        "required": [
          "data",
          "id",
          "updated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "updated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          }
        }
      },
      "DlqMessage": {
        "required": [
          "body",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "messageId": {
            "type": "string"
          }
        }
      },
      "GetDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount",
          "messagesReturnedCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messagesReturnedCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "OtherPrisonerDetails": {
        "required": [
          "firstName",
          "lastName",
          "prisonerNumber",
          "role",
          "roleDescription"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "roleDescription": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "prisonId": {
            "type": "string"
          },
          "prisonName": {
            "type": "string"
          },
          "cellLocation": {
            "type": "string"
          }
        },
        "description": "Other prisoner’s details for an item in a list of non-associations"
      },
      "PrisonerNonAssociation": {
        "required": [
          "authorisedBy",
          "comment",
          "id",
          "isClosed",
          "isOpen",
          "otherPrisonerDetails",
          "reason",
          "reasonDescription",
          "restrictionType",
          "restrictionTypeDescription",
          "role",
          "roleDescription",
          "updatedBy",
          "whenCreated",
          "whenUpdated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "string",
            "enum": [
              "VICTIM",
              "PERPETRATOR",
              "NOT_RELEVANT",
              "UNKNOWN"
            ]
          },
          "roleDescription": {
            "type": "string"
          },
          "reason": {
            "type": "string",
            "enum": [
              "BULLYING",
              "GANG_RELATED",
              "ORGANISED_CRIME",
              "LEGAL_REQUEST",
              "THREAT",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "reasonDescription": {
            "type": "string"
          },
          "restrictionType": {
            "type": "string",
            "enum": [
              "CELL",
              "LANDING",
              "WING"
            ]
          },
          "restrictionTypeDescription": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "authorisedBy": {
            "type": "string"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "updatedBy": {
            "type": "string"
          },
          "isClosed": {
            "type": "boolean"
          },
          "closedBy": {
            "type": "string"
          },
          "closedReason": {
            "type": "string"
          },
          "closedAt": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "otherPrisonerDetails": {
            "$ref": "#/components/schemas/OtherPrisonerDetails"
          },
          "isOpen": {
            "type": "boolean"
          }
        },
        "description": "An item in a list of non-associations for a given prisoner"
      },
      "PrisonerNonAssociations": {
        "required": [
          "closedCount",
          "firstName",
          "lastName",
          "nonAssociations",
          "openCount",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "prisonId": {
            "type": "string"
          },
          "prisonName": {
            "type": "string"
          },
          "cellLocation": {
            "type": "string"
          },
          "openCount": {
            "type": "integer",
            "format": "int32"
          },
          "closedCount": {
            "type": "integer",
            "format": "int32"
          },
          "nonAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerNonAssociation"
            }
          }
        },
        "description": "List of non-associations for a given prisoner"
      },
      "PageNonAssociation": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonAssociation"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "nullHandling": {
            "type": "string"
          },
          "ascending": {
            "type": "boolean"
          },
          "property": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          }
        }
      },
      "LegacyNonAssociation": {
        "required": [
          "comments",
          "effectiveDate",
          "id",
          "offenderNo",
          "offenderNonAssociation",
          "reasonCode",
          "reasonDescription",
          "typeCode",
          "typeDescription"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string",
            "enum": [
              "BUL",
              "PER",
              "RIV",
              "VIC",
              "NOT_REL",
              "UNKNOWN"
            ]
          },
          "reasonDescription": {
            "type": "string"
          },
          "typeCode": {
            "type": "string",
            "enum": [
              "CELL",
              "LAND",
              "WING"
            ]
          },
          "typeDescription": {
            "type": "string"
          },
          "effectiveDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "expiryDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "authorisedBy": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "offenderNonAssociation": {
            "$ref": "#/components/schemas/LegacyNonAssociationOtherPrisonerDetails"
          }
        },
        "description": "Non-association in NOMIS/Prison API format"
      },
      "LegacyNonAssociationOtherPrisonerDetails": {
        "required": [
          "offenderNo",
          "reasonCode",
          "reasonDescription"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string",
            "enum": [
              "BUL",
              "PER",
              "RIV",
              "VIC",
              "NOT_REL",
              "UNKNOWN"
            ]
          },
          "reasonDescription": {
            "type": "string"
          }
        },
        "description": "Details about the other non-association person in NOMIS/Prison API format"
      },
      "DashboardDefinition": {
        "required": [
          "description",
          "id",
          "metrics",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardMetricDefinition"
            }
          }
        }
      },
      "DashboardMetricDefinition": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "ReportDefinitionSummary": {
        "required": [
          "id",
          "name",
          "variants"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDefinitionSummary"
            }
          },
          "dashboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardDefinition"
            }
          }
        }
      },
      "VariantDefinitionSummary": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DynamicFilterOption": {
        "required": [
          "returnAsStaticOptions"
        ],
        "type": "object",
        "properties": {
          "minimumLength": {
            "type": "integer",
            "format": "int32"
          },
          "returnAsStaticOptions": {
            "type": "boolean"
          },
          "maximumOptions": {
            "type": "integer",
            "format": "int64"
          },
          "dataset": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "FieldDefinition": {
        "required": [
          "calculated",
          "defaultsort",
          "display",
          "mandatory",
          "name",
          "sortable",
          "type",
          "visible"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "wordWrap": {
            "type": "string",
            "enum": [
              "none",
              "normal",
              "break-words"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/FilterDefinition"
          },
          "sortable": {
            "type": "boolean"
          },
          "defaultsort": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "boolean",
              "date",
              "double",
              "HTML",
              "long",
              "string",
              "time"
            ]
          },
          "mandatory": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "calculated": {
            "type": "boolean"
          }
        }
      },
      "FilterDefinition": {
        "required": [
          "mandatory",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Radio",
              "Select",
              "daterange",
              "autocomplete",
              "text",
              "date"
            ]
          },
          "mandatory": {
            "type": "boolean"
          },
          "pattern": {
            "type": "string"
          },
          "staticOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOption"
            }
          },
          "dynamicOptions": {
            "$ref": "#/components/schemas/DynamicFilterOption"
          },
          "defaultValue": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "max": {
            "type": "string"
          }
        }
      },
      "FilterOption": {
        "required": [
          "display",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "ReportSummary": {
        "required": [
          "fields",
          "id",
          "template"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "enum": [
              "table-header",
              "table-footer",
              "section-header",
              "section-footer",
              "page-header",
              "page-footer"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryField"
            }
          }
        }
      },
      "SingleVariantReportDefinition": {
        "required": [
          "id",
          "name",
          "variant"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "variant": {
            "$ref": "#/components/schemas/VariantDefinition"
          }
        }
      },
      "Specification": {
        "required": [
          "fields",
          "sections",
          "template"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "enum": [
              "list",
              "list-section",
              "list-aggregate",
              "list-tab",
              "crosstab",
              "summary",
              "summary-section"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDefinition"
            }
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SummaryField": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "boolean",
              "date",
              "double",
              "HTML",
              "long",
              "string",
              "time"
            ]
          }
        }
      },
      "VariantDefinition": {
        "required": [
          "id",
          "name",
          "resourceName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "specification": {
            "$ref": "#/components/schemas/Specification"
          },
          "classification": {
            "type": "string"
          },
          "printable": {
            "type": "boolean"
          },
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportSummary"
            }
          }
        }
      },
      "MetricDefinition": {
        "required": [
          "description",
          "display",
          "id",
          "name",
          "specification"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "specification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricSpecificationDefinition"
            }
          }
        }
      },
      "MetricSpecificationDefinition": {
        "required": [
          "display",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "chart": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "doughnut",
                "bar",
                "line"
              ]
            }
          },
          "group": {
            "type": "boolean"
          }
        }
      },
      "Constant": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "StatementExecutionResponse": {
        "required": [
          "executionId",
          "tableId"
        ],
        "type": "object",
        "properties": {
          "tableId": {
            "type": "string"
          },
          "executionId": {
            "type": "string"
          }
        }
      },
      "StatementCancellationResponse": {
        "required": [
          "cancellationSucceeded"
        ],
        "type": "object",
        "properties": {
          "cancellationSucceeded": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "hmpps-auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes": {
              "read": "Allows read of data",
              "write": "Allows write of data"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/authorize",
            "tokenUrl": "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes": {
              "read": "Allows read of data",
              "write": "Allows write of data"
            }
          }
        }
      }
    }
  }
}