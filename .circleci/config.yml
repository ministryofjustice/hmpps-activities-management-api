version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@10
  codecov: codecov/codecov@3.2.4

parameters:
  alerts-slack-channel:
    type: string
    default: activities-and-appointments-alerts
  releases-slack-channel:
    type: string
    default: activities-and-appointments-alerts
  java-version:
    type: string
    default: "21.0"
  postgres-version:
    type: string
    default: "14"
  localstack-version:
    type: string
    default: "3"

jobs:
  validate:
    executor:
      name: hmpps/java
      tag: << pipeline.parameters.java-version >>
    resource_class: medium+
    environment:
      AWS_S3_AP_BUCKET: dummy-bucket
      _JAVA_OPTIONS: -Xmx2048m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit" -Dkotlin.daemon.jvm.options="--illegal-access=permit" check
      - codecov/upload:
          file: build/reports/jacoco/test/jacocoTestReport.xml
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - store_artifacts:
          path: build/reports/jacoco

  integration-test:
    parallelism: 4
    executor:
      name: hmpps/java_localstack_postgres
      jdk_tag: << pipeline.parameters.java-version >>
      localstack_tag: << pipeline.parameters.localstack-version >>
      services: "sns,sqs,s3"
      postgres_tag: << pipeline.parameters.postgres-version >>
      postgres_username: "activities"
      postgres_password: "activities"
    resource_class: large
    environment:
      AWS_S3_AP_BUCKET: defaultbucket
      _JAVA_OPTIONS: -Xmx2048m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - hmpps/wait_till_ready_postgres
      - hmpps/wait_till_ready
      - run:
          command: |
            cd src/test/kotlin 
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/integration/**/*Test.kt" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{3\}$//' \
              | circleci tests split --split-by=timings)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew integrationTest --build-cache $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - integration-test:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          additional_docker_build_args: --progress=plain
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - integration-test
            - build_docker
            - helm_lint
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-activities-management-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-activities-management-prod
          requires:
            - request-prod-approval

  security:
    triggers:
      - schedule:
          cron: "11 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/gradle_owasp_dependency_check:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
          cache_key: "v3_0"
          jdk_tag: << pipeline.parameters.java-version >>
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
          additional_args: --java-db-repository "ghcr.io/aquasecurity/trivy-java-db:1","public.ecr.aws/aquasecurity/trivy-java-db:1","aquasec/trivy-java-db:1"
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "47 7 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
